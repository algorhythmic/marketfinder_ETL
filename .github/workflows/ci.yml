name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Node.js setup for TypeScript/frontend testing
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run TypeScript linting
        run: npm run lint

      - name: Run TypeScript tests with coverage
        run: npm run test:ts -- --coverage

      # Python setup for ETL pipeline testing
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv (fast Python package manager)
        run: pip install uv

      - name: Install Python dependencies
        run: uv pip install -e .[dev] --system

      - name: Run Python linting (ruff)
        run: ruff check .

      - name: Run Python type checking (mypy)
        run: mypy src/

      - name: Run Python tests with coverage
        run: pytest tests/ --cov=src --cov-report=xml --cov-report=term --cov-fail-under=70

      # Upload coverage reports
      - name: Upload Python coverage to Codecov
        if: matrix.python-version == '3.11' && matrix.node-version == 18
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python
          name: python-coverage
          
      - name: Upload TypeScript coverage to Codecov  
        if: matrix.python-version == '3.11' && matrix.node-version == 18
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: typescript
          name: typescript-coverage

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: docker build -t marketfinder-etl:test .
        
      - name: Test Docker container
        run: |
          docker run --rm marketfinder-etl:test python -c "
          import sys
          sys.path.insert(0, '/app/src')
          import marketfinder_etl
          print('âœ… Docker container working')
          "

  # Optional: Integration tests that require external services
  integration:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      duckdb:
        image: alpine:latest
        options: --rm
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install uv
        run: pip install uv
        
      - name: Install dependencies
        run: uv pip install -e .[dev] --system
        
      - name: Run integration tests
        run: pytest tests/integration/ -v
        env:
          DATABASE_URL: duckdb:///tmp/test_marketfinder.db
          ENVIRONMENT: test